name: Performance Testing

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL for performance testing'
        required: true
        default: 'http://localhost:3000'
      test_duration:
        description: 'Test duration in seconds'
        required: true
        default: '300'
      concurrent_users:
        description: 'Number of concurrent users'
        required: true
        default: '10'

env:
  TARGET_URL: ${{ github.event.inputs.target_url || 'http://localhost:3000' }}
  TEST_DURATION: ${{ github.event.inputs.test_duration || '300' }}
  CONCURRENT_USERS: ${{ github.event.inputs.concurrent_users || '10' }}

jobs:
  # Setup Test Environment
  setup-environment:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hr_system_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    outputs:
      app_url: ${{ steps.deploy.outputs.url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hr_system_perf
        run: |
          npx prisma generate
          npx prisma db push
          npx prisma db seed

      - name: Build application
        run: npm run build

      - name: Start application
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hr_system_perf
          JWT_SECRET: test-secret-for-performance
          JWT_REFRESH_SECRET: test-refresh-secret-for-performance
          PORT: 3000
        run: |
          npm run start:prod &
          sleep 10

      - name: Health check
        id: deploy
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 1; done'
          echo "url=http://localhost:3000" >> $GITHUB_OUTPUT

  # Load Testing
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: setup-environment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Create k6 test script
        run: |
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          import { Rate, Trend } from 'k6/metrics';

          export let errorRate = new Rate('errors');
          export let responseTime = new Trend('response_time');

          export let options = {
            stages: [
              { duration: '2m', target: parseInt(__ENV.CONCURRENT_USERS) },
              { duration: __ENV.TEST_DURATION + 's', target: parseInt(__ENV.CONCURRENT_USERS) },
              { duration: '2m', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'],
              errors: ['rate<0.1'],
            },
          };

          export default function() {
            let response = http.get(__ENV.TARGET_URL + '/health');
            
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });

            errorRate.add(response.status !== 200);
            responseTime.add(response.timings.duration);
            
            sleep(1);
          }
          EOF

      - name: Run load test
        env:
          TARGET_URL: ${{ env.TARGET_URL }}
          TEST_DURATION: ${{ env.TEST_DURATION }}
          CONCURRENT_USERS: ${{ env.CONCURRENT_USERS }}
        run: |
          k6 run --out json=load-test-results.json load-test.js

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: load-test-results.json

  # Stress Testing
  stress-testing:
    name: Stress Testing
    runs-on: ubuntu-latest
    needs: setup-environment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install artillery
        run: npm install -g artillery

      - name: Create artillery config
        run: |
          cat > artillery-config.yml << 'EOF'
          config:
            target: ${{ env.TARGET_URL }}
            phases:
              - duration: 60
                arrivalRate: 5
              - duration: 120
                arrivalRate: 10
              - duration: 60
                arrivalRate: 20
          scenarios:
            - name: "Health check stress test"
              requests:
                - get:
                    url: "/health"
            - name: "API stress test"
              requests:
                - post:
                    url: "/auth/login"
                    json:
                      email: "test@example.com"
                      password: "testpass123"
          EOF

      - name: Run stress test
        run: |
          artillery run artillery-config.yml --output stress-test-results.json

      - name: Generate stress test report
        run: |
          artillery report stress-test-results.json --output stress-test-report.html

      - name: Upload stress test results
        uses: actions/upload-artifact@v3
        with:
          name: stress-test-results
          path: |
            stress-test-results.json
            stress-test-report.html

  # Memory and CPU Profiling
  profiling:
    name: Memory & CPU Profiling
    runs-on: ubuntu-latest
    needs: setup-environment
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install profiling tools
        run: |
          npm install -g clinic autocannon

      - name: Run CPU profiling
        run: |
          clinic doctor --on-port='autocannon localhost:$PORT/health -d 30' -- node dist/main.js
          mv .clinic clinic-cpu-profile

      - name: Run memory profiling
        run: |
          clinic heapprofiler --on-port='autocannon localhost:$PORT/health -d 30' -- node dist/main.js
          mv .clinic clinic-memory-profile

      - name: Upload profiling results
        uses: actions/upload-artifact@v3
        with:
          name: profiling-results
          path: |
            clinic-cpu-profile/
            clinic-memory-profile/

  # Performance Report
  performance-report:
    name: Generate Performance Report
    runs-on: ubuntu-latest
    needs: [load-testing, stress-testing, profiling]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate performance summary
        run: |
          echo "# Performance Test Results" > performance-summary.md
          echo "" >> performance-summary.md
          echo "## Test Configuration" >> performance-summary.md
          echo "- Target URL: ${{ env.TARGET_URL }}" >> performance-summary.md
          echo "- Test Duration: ${{ env.TEST_DURATION }} seconds" >> performance-summary.md
          echo "- Concurrent Users: ${{ env.CONCURRENT_USERS }}" >> performance-summary.md
          echo "" >> performance-summary.md
          echo "## Test Results" >> performance-summary.md
          echo "- Load Test: Completed" >> performance-summary.md
          echo "- Stress Test: Completed" >> performance-summary.md
          echo "- CPU Profiling: Completed" >> performance-summary.md
          echo "- Memory Profiling: Completed" >> performance-summary.md

      - name: Upload performance summary
        uses: actions/upload-artifact@v3
        with:
          name: performance-summary
          path: performance-summary.md

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('performance-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
